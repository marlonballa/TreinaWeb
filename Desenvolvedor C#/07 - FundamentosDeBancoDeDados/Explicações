## Como surgiram os bancos de dados

    Surgimento dos bancos de dados
    Os bancos de dados são um conjunto de dados que se relacionam de forma a gerar um sentido e atender uma comunidade específica. Eles surgiram no final da década de 1960, início dos anos 70. Até então, os programadores usavam o próprio sistema de arquivos do sistema operacional para armazenar os dados dos programas desenvolvidos. Os registros eram gravados em arquivos, e consultados quando necessário. Porém, esse método tinha vários pontos fracos.

    Principais desvantagens do uso de arquivos:

    Dificuldade no acesso aos dados.
    Redundância.
    Inconsistência.
    Perda de arquivos, arquivos danificados.
    Problemas de integridade.
    Dentre os problemas descritos acima, um era “a pedra no caminho”: os sistemas de arquivos não permitiam o acesso simultâneo aos dados; ou seja, se um arquivo fosse aberto por certo processo, o sistema de arquivo o bloqueava e só liberava o acesso após seu fechamento. Nessa época, as redes estavam começando a florescer e havia grande necessidade de acesso concorrente (simultâneo) a um mesmo dado.

    A partir dessa necessidade é que foram criados os primeiros sistemas gerenciadores de bancos de dados, também conhecidos como SGBD. São softwares formados por um conjunto de funcionalidades, que visam suprir as necessidades básicas de um banco de dados, como: definição, recuperação e alteração de dados. Tal criação facilitou muito a vida dos programadores, que antes tinham de se preocupar com a forma como os dados eram gravados, fazer todo o mecanismo de conexão e métodos de pesquisa, entre outras coisas.

    Com o surgimento dos SGBD’s, os programadores passaram a se preocupar apenas em enviar e receber os dados, enquanto o SGBD faz o trabalho pesado. Isso diminuiu o tempo de desenvolvimento de software, pois os programadores agora se preocupam apenas com o projeto do banco de dados, uma vez que o SGBD contém todas as funcionalidades necessárias prontas.

    Principais vantagens dos bancos de dados em relação aos arquivos:

    Controle de redundância.
    Integridade referencial.
    Controle de acesso concorrente (simultâneo).
    Redução no tempo de desenvolvimento.
    Ferramentas de backup e recovery.

## Centralização de Dados

    As empresas sempre contaram com sistemas para facilitar os processos no dia a dia, mesmo antes da chegada da tecnologia da informação. Os sistemas antigos eram lentos e imprecisos, pois funcionavam de modo manual, com registros gravados em papel, um dos principais problemas era – e ainda continua sendo – a descentralização dos dados da organização.

    De forma gradual, os sistemas vêm sendo informatizados, mas os problemas de descentralização dos dados continuarão a existir porque os bancos de dados foram criados de forma independente uns dos outros, e esse tipo de migração pode gerar vários problemas nos dados de uma empresa.

    Vamos entender por que. Suponha uma empresa que funcione do seguinte modo:

    Tem duas filiais de vendas, uma em Curitiba e outra no Rio de Janeiro, e a matriz onde as notas são faturadas e enviadas para os clientes. Por falta de conectividade, os desenvolvedores usam banco de dados locais em cada uma das unidades.

    Essa descentralização de dados pode gerar vários problemas à empresa. Por exemplo, para ter o cadastro de um mesmo cliente em todas as unidades, ele deverá ser cadastrado no sistema de São Paulo, Rio e Curitiba, individualmente, gerando o que é chamado de redundância de dados (dados repetidos).

    É possível que, ao cadastrar o mesmo cliente já cadastrado, o funcionário do Rio de Janeiro digite o CNPJ da empresa errado, gerando assim o que é chamado de inconsistência de dados (dados diferentes).

    Com a centralização do banco de dados, consequentemente há o aumento na complexidade do banco. No caso do exemplo acima, seria preciso ter um cadastro que atendesse as necessidades das duas filiais e da matriz. Mesmo assim, por evitar problemas mais graves, ainda valeria à pena.

    ## Modelo Conceitual

    O modelo conceitual é o mais abstrato dos modelos, como mostra o diagrama no tópico anterior. Ele está mais distante do Hardware do computador e não depende do SGBD que vai ser usado no projeto, e muito menos da tecnologia que usará.

    O modelo conceitual é usado para gerar o modelo lógico, independente do tipo de SGBD. O mesmo modelo conceitual, que você desenvolveu para um banco de dados relacional, pode ser usado em um banco de dados hierárquico.

    Existem alguns tipos de técnicas de modelagem para o modelo conceitual. Neste curso será usado o ER – Entidade Relacionamento, que é largamente utilizado no mercado porque apresenta facilidades no mapeamento para o modelo lógico relacional, que também é o mais usado.

    Para representar o ER será usado um diagrama chamado Diagrama Entidade Relacionamento – DER. Esse diagrama é para o banco de dados mais ou menos o que o fluxograma é para quem está aprendendo lógica de programação, pois a partir dele, e usando técnicas de mapeamento, você é capaz de gerar os códigos SQL do seu banco de dados. A principal diferença entre ele e o fluxograma é que programadores experientes não precisam desenvolver fluxogramas para programar. Já o DER é parte essencial de um banco de dados e deve ser desenvolvido sempre, mesmo por DA’s - Data Administrator experientes, pois ele faz parte da documentação do projeto.

    Os DA’s são profissionais pouco conhecidos no mercado. Eles são responsáveis por toda a definição de dados de uma empresa. O profissional dessa área deve ter características tanto técnicas, para a modelagem correta de um banco de dados, como de negócios para entender corretamente a estrutura de processos da empresa.

## Modelo Lógico

    O modelo lógico é o nível de abstração intermediário entre o nível conceitual e o físico. Ele está fortemente ligado ao tipo de SGBD usado no projeto. Neste curso será abordado o modelo lógico para sistemas gerenciadores de banco de dados relacionais.

    O modelo relacional é o mais usado no mercado. Nesse modelo os dados são gravados em tabelas, que possuem colunas e chaves, entre outras coisas que serão explicadas adiante no curso.

## Modelo Físico
    Como o próprio nome sugere, o modelo físico é o que está mais perto do hardware do computador. Ele se ocupa em como os dados serão gravados no disco e como o banco de dados consultará os dados, entre outras coisas.

    Esse modelo geralmente é usado por profissionais que são responsáveis por otimizar o desempenho do banco. Tal processo também é chamado de tuning, e os ajustes acontecem mesmo depois de o banco de dados estar totalmente desenvolvido. Os profissionais dessa área precisam ter alto nível de conhecimento técnico e são muito valorizados no mercado de trabalho.

## O Conceito de Entidade Relacionamento

    * Técnica para a construção de modelos conceituais
    * modelo altamente podereoso
    * Técnica de modelagem amplamente utilizada
    * Diversos softwares para a criação de modelos
    * Diversos tipos de notações
    * Fácil tradução para o modelo relacional
    * Criada em 1976, por Peter Chen
    * A abordagem Entidade Relacionamento (ER) é representada graficamente pelo Diagrama Entidade Relacionamento (DER). 
        * Quando criamos um DER, dizemos que ele é um Modelo Entidade Relacionamento (MER), pois reproduz uma situação descrita. 

## DER (Diagrama Entidade Relacionamento)
    * O DER possui muitas notações, com pequenas diferenças
        - Estas alterações foram realizadas por acadêmicos e pesquisadores 
        - Alterações na implementação de softwares e modelagem

    * A notação mais comum é de Carlos Alberto Heuser, apresentada em 2001.
        - Entidade
        - Relacionamento
        - Atributos
        - Generalização/Especialização
        - Entidade Associativa

    * Outras abordagens:
        * Niam/ORM 
        * UML

## Entidade

        * Estudo de caso: Livraria
        * Entidades:
            Clientes: NomeCliente, EndereçoCliente, TelefoneCliente, CPFCliente, LivrosComprados, TipoPessoa
            Compra: DataCompra
            Livros: NomeLivro, , Assunto, Editora, ISBN 
            Autor: NomeAutorLivro
            TipoLivro:
            Estoque:
            Editoras: CódigoEditora, EndereçoEditora, TelefoneEditora, NomeGerenteEditora

        * Estudo de Caso: Hospital:
        * Entidades:
            Alas: IdAla, NomeAla
            Enfermeira: CRE, ÉChefe, NomeEnfermeira
            PlanoDeSaúde: IdPlanoSaude, NomePlanoSaude, TelefonePlanosaude
            Médicos: CRM, NomeMedico, EspecialidadeMedico
            Paciente: NomePaciente, CPFPaciente
            Atendimento: NomeMédico, NomePaciente, DataAtendimento, HoraAtendimento.
            Hospital: CNPJ,

## Relações

    * O que são relacões?

    Um relacionamento é uma associação entre ocorrências de entidades. Os relacionamentos são usados para manter o histórico das associações mantidas entre a ocorrência de uma entidade com outra ocorrência. Por exemplo, suponha que você queira saber quais os funcionários que trabalham em determinado projeto:
    
    - Funcionario armazena os objetos do tipo funcionário.
    - Projeto armazena os objetos do tipo projeto.
    - Trabalha armazena a relação entre os objetos do tipo funcionário e projeto.

    A função do relacionamento Trabalha é guardar os funcionários que trabalham em determinado projeto, como mostra o exemplo acima:

    - O funcionário 7 trabalha no projeto 1.
    - O funcionário 3 trabalha no projeto 4.
    - O funcionário 4 trabalha no projeto 3.

    Note que existem ocorrências de funcionarios que não trabalham em nenhum projeto: f1, f2, f5 e f6; e também existe o projeto p2 que não tem funcionário. Não há problema nisso.

    Ao abordar entidade, foi mostrado um exemplo sobre ocorrência de entidade, lembrando que ocorrência é um registro único da entidade. Os relacionamentos também possuem ocorrência de relacionamento.

    O par f7- p1 é uma ocorrência de relacionamento. Como mostra a imagem acima, f7 é uma ocorrência de funcionario e p1 é de projeto.

    Os relacionamentos geralmente representam a ação de uma entidade sobre outra. Por esse motivo, o nome dos relacionamentos preferencialmente deve ser verbo.

## Como Indentificar Relacionamentos entre Entidades

    Cliente COMPRA Livros

## Cardinalidade

    Os relacionamentos no Modelo ER (entidade relacionamento) ocorrem sempre com ocorrências das entidades. A cardinalidade tem como principal objetivo dizer ao modelo com quantas ocorrências da outra entidade, uma única ocorrência daquela entidade pode se relacionar.

    No Diagrama entidade relacionamento as cardinalidades são representadas por dois números, que ficam ao lado da entidade, sendo a primeira cardinalidade mínima e a segunda cardinalidade máxima.

    ## Cardinalidade máxima
    
    No DER existem as cardinalidades mínimas e máximas. A cardinalidade máxima, como o próprio nome indica, tem o objetivo de mostrar o máximo que uma ocorrência da entidade X pode se relacionar com a da entidade Y.

    * Relacionamento 1 para 1

        Aproveitando o exemplo usado até agora, funcionário projeto. 
        No caso acima, está indicado que um funcionário pode participar de, no máximo, um projeto; e um projeto pode ter, no máximo, um funcionário.
        Nessa cardinalidade, um projeto não pode estar associado a mais de um funcionário, assim como um funcionário não pode estar em mais de um projeto.
    
    * Relacionamento 1 para N

        Nesse exemplo está indicado que um funcionário pode trabalhar em, no máximo, um projeto; e que em um projeto podem trabalhar, no máximo, dez funcionários.

        Parece estranho, mas no DER a cardinalidade de um elemento fica no lado oposto dele. Veja:

        Cada funcionário só pode trabalhar em um único projeto, mas um projeto pode ter vários funcionários. Lembrando que não existe problema se, em um projeto, trabalhar apenas um funcionário.

    * Relacionamento N para N

        Levando em conta a cardinalidade vista anteriormente 1 para N, esse gráfico estaria totalmente errado, pois o funcionário f3 trabalha no projeto p1 e ao mesmo tempo no p4. Segundo o diagrama, um funcionário poderia trabalhar em, no máximo, 1 projeto. Nessa parte entra a cardinalidade máxima N para N.

        Existem situações onde é necessário que a cardinalidade máxima de ambas as partes seja do tipo N. Veja o exemplo:

        A cardinalidade é muito importante para o modelo de dados. Você aprenderá no andamento do curso, que ao transformar do modelo conceitual para o modelo lógico, se houver problemas nas cardinalidades, o modelo lógico poderá sair diferente do que se queria representar no modelo conceitual.

    * Exemplos de cardinalidade máxima

        Um produto pode ter vários pedidos e um pedido pode ter vários produtos.

## Relacionamento Opícional 

    Os relacionamentos opcionais são indicados pela cardinalidade mínima 0. Nesse tipo de relacionamento podem existir ocorrências de entidade que não se relacionam com nenhuma outra ocorrência dentro daquele relacionamento.

        * Um projeto pode não ter nenhum funcionário trabalhando e um funcionário pode não trabalhar em nenhum projeto. 
    
## Relacionamento Obrigatório

    O relacionamento obrigatório é representado pela cardinalidade mínima 1. Nesse tipo de relacionamento a entidade que for representada com cardinalidade 1 deve, obrigatoriamente, ter todas as ocorrências relacionadas.

    * Todo projeto deve ter pelo menos um funcionário trabalhando nele (Obrigatório de um lado - projeto)
    * Todo funcionário deve trabalhar em pelo menos um projeto e todo projeto deve ter um funcionário trabalhando nele (obrigatório dos dois lados)

## Relacionamento ternário

    No DER (diagrama entidade relacionamento) podem existir relacionamentos com grau maior que dois. Esses relacionamentos podem ser ternários, quaternários e etc.

    Em um relacionamento binário as cardinalidades estão sempre ligadas ao quanto uma ocorrência de entidade pode se relacionar com a ocorrência da outra entidade. Já no relacionamento ternário, um par de ocorrências é que está relacionada à outra entidade.

    Exemplo: Em um relacionamento chamado Locação, há as entidades Projeto, Funcionário e Função. Você deve pensar do seguinte modo: “um par Funcionário Função pode estar alocado em quantos projetos?”.

## Autorrelacionamento

    Existem relacionamentos entre duas entidades diferentes (binários); existem relacionamentos entre três entidades (ternários); e existem também relacionamentos entre ocorrências da mesma entidade, chamados autorrelacionamento, ou relacionamento recursivo, como trazem algumas bibliografias.

    Uma ocorrência da entidade exerce uma ação sobre outra ocorrência da mesma entidade.

    Um exemplo usando casamento pode ser meio traumático, para alguns. Porém, para fins didáticos, ele atende perfeitamente. Uma pessoa pode ser casada ou solteira. Então, a cardinalidade mínima deve ser opcional. Por outro lado, uma pessoa não pode ser casada com duas pessoas ao mesmo tempo – pelo menos é isso que está previsto em lei – então, a cardinalidade máxima será um.

    Note que, no autorrelacionamento, uma ocorrência de entidade exerce uma ação sobre outra ocorrência da mesma entidade. No caso do exemplo, um é marido e a outra, esposa.

## Atributos Básicos

    Até o momento, sempre que foi falado em ocorrência de entidade foi pensado em um elemento com características próprias, que pode ou não ser diferente das demais ocorrências. Mas, o que torna uma ocorrência de entidade diferente das demais da mesma entidade?

    O que torna uma ocorrência diferente das demais são os atributos. Eles são dados relacionados com aquela ocorrência específica no diagrama entidade relacionamento. Os atributos são representados por pequenos círculos.

    Um cliente possui codigo, nome, tel, end e tipo. Ao tratar das entidades, no começo do curso, foi dado um exemplo de ocorrência de entidade. Observe como agora ele faz mais sentido:

## Atributos monovalorados

    Assim como nos relacionamentos existem cardinalidade, nos atributos elas também existem. O objetivo é dizer quantos valores daquele atributo podem estar em uma ocorrência da entidade ou relacionamento.

    * Monovalorado opcional

    Veja o exemplo de atributo monovalorado opcional, cardinalidade (0,1):


    * Monovalorado obrigatório

    Quando não existe cardinalidade explícita ao lado do atributo, automaticamente entende-se que a cardinalidade dele é (1,1); ou seja, o atributo é monovalorado e obrigatório.
    Como a maioria dos atributos mostrados no modelo entidade relacionamento são do tipo monovalorado obrigatório (Cardinalidade (1,1)), se fosse preciso exibir a cardinalidade deles, isso tornaria o diagrama visualmente mais poluído.

## Atributo Multivalorado
    
    Assim como os relacionamentos têm cardinalidade N, indicando que uma ocorrência pode se relacionar com várias outras ocorrências, os atributos também possuem a cardinalidade N para indicar que eles podem receber vários valores daquele atributo. Veja um exemplo de atributo multivalorado opcional:

    Uma ocorrência da entidade Contato pode ter no mínimo 0 telefone e, no máximo, N. Apesar de ser muito difícil, hoje em dia, uma pessoa não ter telefone, pode acontecer. Assim como existem pessoas que possuem vários números de telefone.

## Atributo multivalorado obrigatório

    Além dos atributos multivalorados opcionais, existem os multivalorados obrigatórios. Veja:

    No caso do cadastro de um site, o usuário obrigatoriamente deve possuir, no mínimo, um e-mail; e, caso queira, pode cadastrar mais de um e-mail para contato.

    Assim como na área da programação, existe uma infinidade de regras de bons costumes como: manter a formatação do código e manter o padrão dos nomes das variáveis, classe e etc. No DER também existem os bons costumes. Assim como os relacionamentos ternários não são muito utilizados devido a alguns problemas, os atributos multivalorados também enfrentam um grande problema que os tornam questão de mau costume. Ao transformar o modelo do exemplo para relacional, na hora de implementar no banco, será preciso que ele tenha suporte para campos multivalorados ou array. Mas o grande problema é que alguns não têm essa funcionalidade e outros até têm, mas são difíceis de trabalhar. Então, ao invés de criar um atributo multivalorado, você deverá usar uma nova tabela.

## Atributo simples VS composto

    * Atributo Simples

    Todos os atributos mostrados até agora são considerados simples e também conhecidos como atômicos (do grego átomo, que significa indivisível). 
    Pela lógica não faz sentido dividir o atributo login em duas partes. Por exemplo, para que dividir o login: Maria_2010 em duas partes? Não há necessidade alguma. A mesma coisa para os atributos senha e frase de segurança.

## Atributo Composto

    Agora pense no atributo endereço. O que compõe esse atributo?
        logradouro, número, complemento
    Pode-se criar um atributo composto Endereço, que contenha todos esses atributos. 
    Segundo a definição, um atributo composto é aquele que pode ser divido em partes menores.

    O atributo nome_completo foi separado em nome e sobrenome. O atributo end_completo foi separado em estado, cidade e bairro. O grande detalhe está no atributo end_rua, pois se trata de um atributo composto dentro de outro. Você pode criar quantos atributos compostos alinhados quiser, mas lembre-se que se deve manter os diagramas sempre os mais limpos possíveis. É desnecessário criar vários atributos se eles podem ser representados apenas no modelo relacional.

## Modelo equivalente

    No modelo entidade relacionamento quase sempre existem vários jeitos de representar um mesmo modelo, o que é chamado de equivalente. No caso dos atributos compostos não é diferente: pode ser feito um modelo equivalente colocando-se todos os atributos simples na própria entidade.

## Atributos de relacionamento

Os atributos são propriedades de uma ocorrência de entidade ou relacionamento, cujo objetivo é tornar a ocorrência particular, com características próprias. Até agora, todos os atributos demonstrados estavam ligados às entidades. Mas existem casos onde um atributo não pode ser de responsabilidade de nenhuma entidade.

Primeiro relembre como ler um atributo:

Um paciente pode estar em, no mínimo, 0 consultas; e, no máximo, em N consultas.
Um médico pode realizar, no mínimo, 0 consultas; e, no máximo, N consultas.
Até aqui tudo perfeito. Dispõe-se das informações do paciente e das informações do médico. Mas o histórico de data e hora das consultas deve ser salvo no banco de dados. Onde colocar esses atributos? Primeiro, os atributos Data e Hora foram inseridos em Paciente.

Com os atributos data e hora na entidade Paciente, não é possível mais considerar as cardinalidades expressas do diagrama, pois como a data e hora da consulta estão fixadas no paciente, ele só poderá participar de uma consulta. Quando ele for realizar outra consulta você deverá apagar o campo data e hora e gravar novamente, perdendo assim o histórico da primeira consulta.

Se tirar os atributos da entidade Paciente e colocá-los na entidade Médico, ocorrerá o mesmo problema. O único modo de resolver a questão do diagrama acima, sem criar uma nova entidade chamada consulta, é fixar os atributos data e hora diretamente no relacionamento consulta.

Agora sim, um médico pode ter consultas marcadas em horários diferentes com vários pacientes, assim como um paciente pode ter várias consultas marcadas com diferentes médicos, todas em horários distintos.







