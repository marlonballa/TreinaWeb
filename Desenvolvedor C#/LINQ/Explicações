## Realizando consultas com LINQ

    * As três partes de uma consulta:
        - Fonte de Dados
        - Consulta
        - Execução da Consulta

    //1. A fonte de dados
    int[] numeros = new int[5] {0,1,2,3,4}

    //2. A consulta
    var consulta = from num in numeros select num;

    //3. Execução da Consulta
    foreach (int num in consulta)
    {
        Console.WriteLine(num);
    }

        * Execução adiada: Acontece quando a consulta é realizada apenas no terceiro momento e gera o array em memória, o que evita que as informações ocupem espaço de memória, antes do que são realmente necessárias.

    * Sintaxes de Consultas LINQ

        ** Query Sintax 
            - Declarativa
            - Semelhante ao SQL
            - Fácil Leitura

        ** Method Sintax
            - Imperativa
            - Métodos em Cadeia
            - Expressões Lambda

## Listas Genéricas

No framework .NET dispomos, há bastante tempo, de várias classes que implementam coleções de dados, utilizando inclusive os modelos de lista e fila. Essas classes estão presentes no namespace System.Collections e as principais são:

Stack (pilha);
Queue (fila);
Hashtable (dicionário);
ArrayList (lista).
Cada uma dessas classes possui suas particularidades referentes ao funcionamento, e de fato atendem boa parte das necessidades. A principal limitação delas está no fato de que todas trabalham com elementos do tipo object. Isso é necessário para que todas sejam abrangentes, não fixando o tipo de dados que irão conter.

Apesar de essa flexibilidade ser útil às vezes, de forma geral ela implica na realização de muitas conversões de dados, pois quando recuperamos um item da lista, normalmente sabemos o seu tipo e precisamos tratá-lo como tal. Para isso, precisamos fazer um cast do tipo object para o tipo desejado, e esse processo quando realizado muitas vezes, pode gerar impactos na performance.

Para superar essa limitação foram inseridas as coleções genéricas, tão logo os tipos genéricos passaram a fazer parte da linguagem. Essa classes estão contidas no namespace System.Collections.Generic e as principais são:

Stack<T> (pilha);
Queue<T> (fila);
LinkedList<T> (lista encadeada);
SortedList<T> (lista ordenada);
List<T> (lista);
Dictionary<TKey, TValue> (dicionário),
Com as listas genéricas nós especificamos o tipo de dados que elas irão conter no momento da sua declaração. E a partir daí, ao acessar os elementos, não precisamos mais realizar conversões, pois o compilador já saberá com qual tipo estamos lidando. Além disso, contaremos com os recursos do próprio IDE para auxiliar no desenvolvimento, como a opção de intellisense/autocomplete a partir do tipo de dado especificado.

## Realizando Consultas LINQ com Query Sintax

## Delegates

    * Estruturuas que apontam para uma função, de modo que seja possível acionar essa função (método) a partir de um objeto delegate, além de ser possível atribuir a este objeto diferentes funções que atendam ao critério de estrutura estabelecido por este delegate. 

    using System; 


    namespace nameOfNameSpace
    {
        //delegate <typeOfReturn> nameFunction(string parameterExample);
        //Aponta para qualquer método/função que possua essa estrutura, ou seja, tenha o tipo de retorno informado e aceite parâmetros com as características exigidas. 

        delegate void ExibirMensagem(string texto);

        class Program
        {
            static void main(string[] args)
            {
                //Criando um objeto do tipo "Exibir Mensagem"
                ExibirMensagem exibir = ExibirInformacoes;

                //Chamando o delegate
                exibir("Mensagem de teste");
                //O compilador entende que atribuido a este objeto está o método "ExibirInformação"
            }

            static void ExibirInformacoes(string informacoes)
            {
                Console.WriteLine($"informação: { informacoes }")
            }
        }
    }

## Delegates essenciais do LINQ: Action, Func e Predicate

    * Possuem uma estrutura pré-fedinida, além de estarem amplamente presentes nos delegates do LINQ. 

    * Action<genericType> nameExample 
        - Recebe como parâmetro genérico um tipo de dado, que deve ser o mesmo que será recebido pelo delegate e obrigatoriamente recebe métodos que não retornam um valor. 

    * Func<genericType, genericType, returnGenericType> nameExample
        - Recebe tipos de dados por parâmetro genérico, podendo receber vários parâmetros (16 max) e retornar informações de um determinado tipo. 

    * Predicate<genericType> nameExample
        - recebe um objeto e retorna um valor booleano, o que faz com que seja amplamente utilizado para a validação de critérios. 

    using System; 
    namespace nameOfNameSpace
    {
        delegate void ExibirMensagem(string texto);
        class Program
        {
            static void main(string[] args)
            {
                Action<string> exibir = ExibirInformacoes;
                exibir("Teste de chamada ao método"); 

                Func<int, int, int> realizarOperacao = Somar;
                Console.WriteLine(realizarOperacao(1, 2));

                Predicate<int> ehPar = itsPair;
                Console.WriteLine(ehPar(1); )
            }

            static void ExibirInformacoes(string informacoes)
            {
                Console.WriteLine($"informação: { informacoes }")
            }

            static int Somar(int a, int b)
            {
                return a + b;
            }
            
            static bool itsPair(int a)
            {
                return a % 2 == 0;
            }
        }
    }

## Introdução às Expressões Lambda

    * É uma forma simples de escrever um método anônimo
    * Estrutura:
        (lista de parâmetros) => Corpo do método

        => Operador Lambda

        (similar as array functions do JavaScript)

    delegate void ExibirMensagem(string texto);
        class Program
        {
            static void main(string[] args)
            {
                Action<string> exibir = informacoes => Console.WriteLine($"informação: { informacoes }");;
                exibir("Teste de chamada ao método"); 

                Func<int, int, int> realizarOperacao = (a, b) => a + b;
                Console.WriteLine(realizarOperacao(1, 2));

                Predicate<int> ehPar = a => a % 2 == 0;
                Console.WriteLine(ehPar(1); )
            }
        }
    